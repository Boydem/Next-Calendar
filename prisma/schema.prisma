// This Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String      @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  userUrl        String      @unique
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  eventTypes     EventType[]
  accounts       Account[]
  sessions       Session[]
  events         Event[]
  schedules      Schedule[]

  @@map("users")
}

model EventType {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  ownerUrl           String
  name               String
  description        String?
  color              String
  slug               String
  location           String?
  durationInMinutes  Int
  bookingRangeInDays Int
  scheduleId         String   @db.ObjectId
  schedule           Schedule @relation(fields: [scheduleId], references: [id])

  events Event[]
  user   User    @relation(fields: [ownerUrl], references: [userUrl], onDelete: Cascade)

  @@map("event-types")
}

model Schedule {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  userId     String      @db.ObjectId
  name       String
  intervals  Interval[]
  eventTypes EventType[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Interval {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  scheduleId  String  @db.ObjectId
  from        String
  to          String
  day         String
  isDayActive Boolean

  schedule Schedule @relation(fields: [scheduleId], references: [id])
}

model Event {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  eventTypeId String   @db.ObjectId
  userId      String   @db.ObjectId
  name        String
  email       String
  startDate   DateTime
  endDate     DateTime
  status      String

  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  events EventType @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)

  @@map("events")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification-tokens")
}
